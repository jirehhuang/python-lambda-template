#!/usr/bin/env python3
"""
Simple coverage.xml checker.

Usage:
    poetry run python check_coverage.py --min 95 coverage.xml

This mimics a Codecov-style required coverage gate.
It parses the total project line-rate from pytest-cov's XML report.
"""

from __future__ import annotations

import argparse
import sys
import xml.etree.ElementTree as ET
from pathlib import Path


def parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(
        description="Enforce minimum line coverage from coverage.xml"
    )
    p.add_argument(
        "--min",
        type=float,
        required=True,
        help="Minimum coverage percentage required (e.g., 95 for 95%)",
    )
    p.add_argument(
        "file",
        type=Path,
        help="Path to coverage.xml file generated by pytest-cov",
    )
    return p.parse_args()


def main() -> None:
    args = parse_args()

    if not args.file.is_file():
        print(
            f"ERROR: Coverage file '{args.file}' not found.", file=sys.stderr
        )
        sys.exit(1)

    try:
        tree = ET.parse(args.file)
        root = tree.getroot()
        # Pytest-cov coverage.xml has a "line-rate" attribute on <coverage>
        line_rate = float(root.attrib["line-rate"])
    except (ET.ParseError, KeyError, ValueError) as e:
        print(f"ERROR: Failed to parse coverage XML: {e}", file=sys.stderr)
        sys.exit(1)

    coverage_percent = line_rate * 100
    min_required = args.min

    print(f"Total coverage: {coverage_percent:.2f}%")
    if coverage_percent < min_required:
        print(
            f"ERROR: Coverage {coverage_percent:.2f}% "
            f"is below required {min_required:.2f}%",
            file=sys.stderr,
        )
        sys.exit(1)

    print("Coverage check passed âœ…")


if __name__ == "__main__":
    main()
